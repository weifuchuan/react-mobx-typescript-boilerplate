const { resolveApp } = require('../config/kit');

'use strict'; 
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development'; 
process.on('unhandledRejection', err => {
  throw err;
});
 
const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
// @ts-ignore
const clearConsole = require('react-dev-utils/clearConsole');
// @ts-ignore
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
// @ts-ignore
} = require('react-dev-utils/WebpackDevServerUtils');
// @ts-ignore
const openBrowser = require('react-dev-utils/openBrowser'); 
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(resolveApp("yarn.lock"));
const isInteractive = process.stdout.isTTY;

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    // @ts-ignore
    chalk.cyan(
      // @ts-ignore
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        // @ts-ignore
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  // @ts-ignore
  console.log(`Learn more here: ${chalk.yellow('http://bit.ly/2mwWSwH')}`);
  console.log();
}

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `choosePort()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  // @ts-ignore
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(resolveApp("package.json")).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    const proxySetting = require(resolveApp("package.json")).proxy;
    const proxyConfig = prepareProxy(proxySetting,  resolveApp('public'));
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    // @ts-ignore
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    // @ts-ignore
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      // @ts-ignore
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      // @ts-ignore
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });
  })
  // @ts-ignore
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });


// const webpack = require('webpack')
// const middleware = require('webpack-dev-middleware')
// const webpackOptions = require('../config/webpack.config.dev') // webpack 配置文件的路径
// const openBrowser = require('react-dev-utils/openBrowser');
// const qs = require("qs");
// const timeout = require('connect-timeout');
// const proxy = require('http-proxy-middleware');

// // 本地的开发环境默认使用 development mode
// webpackOptions.mode = 'development'
// // https://github.com/webpack-contrib/webpack-hot-middleware#client
// const webpackHotMiddlewareClient = {
//   path: "/__webpack_hmr",
//   timeout: 2000,
//   reload: true,
//   autoConnect: true
// };
// webpackOptions.entry = [
//   `webpack-hot-middleware/client?${qs.stringify(webpackHotMiddlewareClient)}`,
//   ...webpackOptions.entry
// ];

// const compiler = webpack(webpackOptions)
// const express = require('express')
// const app = express()

// app.use(middleware(compiler, {
//   noInfo: true,
//   publicPath: webpackOptions.output.publicPath
// }));

// app.use(require("webpack-hot-middleware")(compiler));

// app.use(timeout(30 * 1000));
// app.use((req, res, next) => {
//   if (!req.timedout) next();
// });

// app.use(proxy('/', {
//   target: "http://localhost:80",
//   changeOrigin: true,
//   ws: true,
// }))

// const port = 3000;

// app.listen(port, () => {
//   console.log(`App started on port ${port}. Open http://localhost:${port}/ `)
//   openBrowser(`http://localhost:${port}/`)
// })